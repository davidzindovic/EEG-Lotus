#include <Mindwave.h>
#include <AltSoftSerial.h>

//#define MINDWAVE_BAUDRATE 57600
#define MAX_SPREMEMBA 8   // prilagajaš glede na navor,(100/(MAX_ST_OBRATOV/ST_OBRATOV_NA_S)
#define ST_OBRATOV_NA_S 1
#define MAX_ST_OBRATOV 6  // najvec koliko obratov koliko sme narest (omejitve aktuatorja)

#define HITROST_MOTORJA 2000 //simbolično, dano glede na test za 1 obrat, lahko se zniža
#define KORAKI_MOTORJA 2000  // lahko se prilagaja skupaj s hitrostjo, če je potrebno

// Povezava koračnega motorja:
#define PIN_STEP_ENABLE 2
#define PIN_STEP1_DIRECTION 3
#define PIN_STEP1_STEP 4

Mindwave mindwave;
AltSoftSerial bluetooth;

// Spremenljivke za EEG in regulacijo
int meditacija; int meditacija_prej=0; int regulacijsko_povprecje=0;
int motor=0;int delta_motor=0;
bool first=false;

// Spremenljivke za koračni motor:
unsigned int pozicija_cilj=0;  //cilj pozicije
unsigned int pozicija=0;       // dejanska pozicija
int stepsPerSecond = 0;


void setup() {
    //Condifure stepper driver pins as OUTPUTs
    pinMode(PIN_STEP1_DIRECTION, OUTPUT);
    pinMode(PIN_STEP1_STEP, OUTPUT);
    pinMode(PIN_STEP_ENABLE, OUTPUT);
    //Serial.begin(9600);
    //ENABLE pin has to be pulled LOW for TCM2209 used in this example to enable the driver
    digitalWrite(PIN_STEP_ENABLE, LOW); 
      bluetooth.begin(MINDWAVE_BAUDRATE);
  Serial.begin(MINDWAVE_BAUDRATE);

}

void onMindwaveData() {

  meditacija = mindwave.meditation();
  regulacija(meditacija); //mora bit vse po branju EEG v funkciji ker sicer nastanejo težave

}

// funkcija za regulacijo, ki glede na trenutno in prejsnje stanje naredi primerno spremembo:
void regulacija(unsigned int trenutno_stanje)
{

if(first!=false || trenutno_stanje!=0) //preventiva za prvo izvedbo
{ // upoštevamo novo vrednost meditacije oz. umirjenosti in pomnimo le zadnjo prejšnjo:
 if (first==false)
  {
  if(trenutno_stanje!=meditacija_prej)meditacija_prej=trenutno_stanje;//regulacija(meditacija_prej,trenutno_stanje);
  first=!first;
  }
 else
  { // računamo regulacijsko povprečje z aritmetično sredino (in prilagajamo glede na vrednosti meditacij zdej in prej)
   if(trenutno_stanje>meditacija_prej)regulacijsko_povprecje=(trenutno_stanje-(trenutno_stanje-meditacija_prej)/2);
   else regulacijsko_povprecje=(trenutno_stanje+(-trenutno_stanje+meditacija_prej)/2);
   meditacija_prej=trenutno_stanje;
  }
}
 // uporabimo regulacijske vrednosti za določitev premika motorja, pazimo na overflow:
 if(abs(regulacijsko_povprecje-motor)>MAX_SPREMEMBA) delta_motor=MAX_SPREMEMBA*(regulacijsko_povprecje-motor)/abs(regulacijsko_povprecje-motor); //zadnji del je za predznak
 else delta_motor=regulacijsko_povprecje-motor; 

// premik shranimo v spremenljivko:
motor+=delta_motor;

// Za Serial Plotter:
Serial.print(meditacija);
Serial.print(",");
Serial.print(trenutno_stanje);
Serial.print(",");
Serial.print(regulacijsko_povprecje);
Serial.print(",");
Serial.println(motor);

// Preventiva, da ne bo težav pri mapiranju:
if (motor>100) motor=100;
else if (motor<0) motor=0;

// mappamo od 0 do max obratov (6)
pozicija_cilj=map(motor,0,100,0,9534);

Serial.print(pozicija);
Serial.print(",");
Serial.println(pozicija_cilj);

// zančno primerjamo trenutno in ciljno pozicijo ter obračamo motor (en korak je ena sprememba pozicije)
while(pozicija!=pozicija_cilj) // while, ker želi motor hitre pulze in veliko teh za opazno spremembo (ima mikrokorake lahko)
{
  vrtenje(HITROST_MOTORJA,pozicija<pozicija_cilj,KORAKI_MOTORJA); // hitrost in število sta konstantni vrednosti, definirani na vrhu
}                                                                 // vmesni pogoj definira smer vrtenja
Serial.println("ENAKO");
}
//konec regulacijske funkcije

//funkcija za vrtenje motorja:
void vrtenje(int hitrost, bool smer, int stevilo_korakov)
{

// spremenljivka in predznak hitrosti določata če se spremenljivka pozicija povečuje ali zmanjšuje
if(smer) stepsPerSecond = hitrost;
else stepsPerSecond = -hitrost;

//for zanka za v specifičnem obsegu:  
for(int i=stevilo_korakov;(i>0)&&(pozicija!=pozicija_cilj);--i)
{
   if ((((stepsPerSecond > 0) && (pozicija < 9534))||((stepsPerSecond < 0) && (pozicija>0)))) //pogoj 9534 je zgornja meja korakov, ki jih naredi motor pri cca 6 obratih
   {
    static unsigned long nextChange = 0;
    static uint8_t currentState = LOW;

    if (stepsPerSecond == 0)
    {
        //if speed is 0, set the step pin to LOW to keep current position
        currentState = LOW;
        digitalWrite(PIN_STEP1_STEP, LOW);
    }
    else
    {
        //if stepsPerSecond is not 0, then we need to calculate the next time to change the state of the driver
        if (micros() > nextChange)
        {

            //Generate steps
            if (currentState == LOW)
            {
                currentState = HIGH;
                nextChange = micros() + 30;

                if ((stepsPerSecond > 0) && (pozicija < 65535))
                {
                    pozicija++;
                }
                else if ((stepsPerSecond < 0) && (pozicija>0))
                {
                    pozicija--;
                }
            }
            else
            {
                currentState = LOW;
                nextChange = micros() + (1000 * abs(1000.0f / stepsPerSecond)) - 30;
            }

            //Set direction based on the sign of stepsPerSecond
            if (stepsPerSecond > 0)
            {
                digitalWrite(PIN_STEP1_DIRECTION, LOW);
            }
            else
            {
                digitalWrite(PIN_STEP1_DIRECTION, HIGH);
            }

            //Write out the step pin
            digitalWrite(PIN_STEP1_STEP, currentState);
        }
    }


}   }    
        digitalWrite(PIN_STEP1_STEP, LOW); //dodatna vrstica, preventivno da drži motor pri miru  
        }

void loop() {
  mindwave.update(bluetooth, onMindwaveData); //začetek verige funkcij, 1. EEG, 2. Regulacija, 3. Motor
}
